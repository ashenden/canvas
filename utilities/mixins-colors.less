/* ----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

utilities/mixins-colors.less

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- */






/* ----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

Lighten and Darken Colors

-------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- */

.lighten-color(@color, @lightness) {

	color: lighten(@color, @lightness * (100 - lightness(@color)));

}

.darken-color(@color, @lightness) {

	color: darken(@color, @lightness * lightness(@color));

}

// USAGE: ~`color_lightness("@{gray}", 50)`;

@color_lightness: ~`color_lightness = function(color, amount) {

    var usePound = false;

    if (color[0] == "#") {

        color = color.slice(1);
        usePound = true;

    }

    var num = parseInt(color, 16);

    var red = (num >> 16) / 255;
    var green = ((num >> 8) & 0x00FF) / 255;
    var blue = (num & 0x0000FF) / 255;
    var max = Math.max(red, green, blue);
    var min = Math.min(red, green, blue);
    var hue = (max + min) / 2;
    var saturation = (max + min) / 2;
    var lightness = (max + min) / 2;

    if(max == min) {

        hue = saturation = 0; // achromatic

    } else {

        var delta = max - min;
        saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
        
        switch(max) {
            case red:

            	hue = (green - blue) / delta + (green < blue ? 6 : 0);
            	break;

            case green:

            	hue = (blue - red) / delta + 2;
            	break;

            case blue:

            	hue = (red - green) / delta + 4;
            	break;

        }

        hue /= 6;

    }

	// Adjust Lightness

	if(amount > 0) {

		lightness = lightness + ((amount / 100) * (1 - lightness));

	} else {

		lightness = ((100 - (-1 * amount)) / 100) * lightness;

	}

    if(saturation == 0) {

        red = green = blue = lightness;

    } else {

        function hue2rgb(p, q, t) {

            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;

            return p;

        }

        var q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
        var p = 2 * lightness - q;

        red = hue2rgb(p, q, hue + 1/3);
        green = hue2rgb(p, q, hue);
        blue = hue2rgb(p, q, hue - 1/3);

    }

	if (red > 255) {

    	red = 255;

    } else if (red < 0) {

		red = 0;

    }

	if (blue > 255) {

    	blue = 255;

    } else if (blue < 0) {

    	blue = 0;

    }

	if (green > 255) {

    	green = 255;

    } else if (green < 0) {

    	green = 0;

    }

	return (usePound ? "#" : "") + ("0" + parseInt((red * 255), 10).toString(16)).slice(-2) + ("0" + parseInt((green * 255), 10).toString(16)).slice(-2) + ("0" + parseInt((blue * 255), 10).toString(16)).slice(-2);


}`;






/* ----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

Gradients

-------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- */

#gradient {

	.horizontal(@color-1: #555, @color-2: #333) {

		.horizontal(@color-1, 0%, @color-2, 100%);

	}

	.horizontal(@color-1: #555, @color-1-stop: 0%, @color-2: #333, @color-2-stop: 100%) {

		background-image: -webkit-linear-gradient(left, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-image: -o-linear-gradient(left, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-image: linear-gradient(to right, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@color-1),argb(@color-2)));

	}

	.vertical(@color-1: #555, @color-2: #333) {

		.vertical(@color-1, 0%, @color-2, 100%);

	}

	.vertical(@color-1: #555, @color-1-stop: 0%, @color-2: #333, @color-2-stop: 100%) {

		background-image: -webkit-linear-gradient(top, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-image: -o-linear-gradient(top, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-image: linear-gradient(to bottom, @color-1 @color-1-stop, @color-2 @color-2-stop);
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@color-1),argb(@color-2)));

	}

	.directional(@color-1: #555, @color-2: #333, @deg: 45deg) {

		background-repeat: repeat-x;
		background-image: -webkit-linear-gradient(@deg, @color-1, @color-2);
		background-image: -o-linear-gradient(@deg, @color-1, @color-2);
		background-image: linear-gradient(@deg, @color-1, @color-2);

	}

	.horizontal-three-colors(@color-1: #00b3ee, @color-1-stop: 0%, @color-2: #7a43b6, @color-2-stop: 50%, @color-3: #c3325f, @color-3-stop: 0%) {

		background-image: -webkit-linear-gradient(left, @color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-image: -o-linear-gradient(left, @color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-image: linear-gradient(to right, @color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)", argb(@color-1), argb(@color-3)));

	}

	.vertical-three-colors(@color-1: #00b3ee, @color-1-stop: 0%, @color-2: #7a43b6, @color-2-stop: 50%, @color-3: #c3325f, @color-3-stop: 0%) {

		background-image: -webkit-linear-gradient(@color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-image: -o-linear-gradient(@color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-image: linear-gradient(@color-1 @color-1-stop, @color-2 @color-2-stop, @color-3 @color-3-stop);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", argb(@color-1), argb(@color-3)));

	}

	.radial(@inner-color: #555, @outer-color: #333) {

		background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
		background-image: radial-gradient(circle, @inner-color, @outer-color);
		background-repeat: no-repeat;

	}

	.striped(@color: rgba(255, 255, 255, 0.15), @angle: 45deg) {

		background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: -o-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);

	}

}
