/* ----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

utilities/mixin-colors.less

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- */






/* ----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

Lighten and Darken Colors

-------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- */

.lighten-color(@color, @lightness) {
	
	color: lighten(@color, @lightness * (100 - lightness(@color)));
	
}

.darken-color(@color, @lightness) {
	
	color: darken(@color, @lightness * lightness(@color));
	
}

// USAGE: ~`color_lightness("@{gray}", 50)`;

@color_lightness: ~`color_lightness = function(color, amount) {
  
    var usePound = false;
	
    if (color[0] == "#") {
    	
        color = color.slice(1);
        usePound = true;
        
    }
    
    var num = parseInt(color, 16);
    
    var red = (num >> 16) / 255;
    var green = ((num >> 8) & 0x00FF) / 255;
    var blue = (num & 0x0000FF) / 255;
    var max = Math.max(red, green, blue);
    var min = Math.min(red, green, blue);
    var hue = (max + min) / 2;
    var saturation = (max + min) / 2;
    var lightness = (max + min) / 2;

    if(max == min) {
    	
        hue = saturation = 0; // achromatic
        
    } else {
    	
        var delta = max - min;
        saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
        switch(max) {
            case r:
            	
            	hue = (green - blue) / delta + (green < blue ? 6 : 0);
            	break;
            	
            case g:
            	
            	hue = (blue - red) / delta + 2;
            	break;
            	
            case b:
            	
            	hue = (red - green) / delta + 4;
            	break;
            
        }
        
        hue /= 6;
        
    }
	
	// Adjust Lightness
	
	if(amount > 0) {
		
		lightness = lightness + ((amount / 100) * (1 - lightness));
		
	} else {
		
		lightness = ((100 - (-1 * amount)) / 100) * lightness;
		
	}
	
    if(saturation == 0) {
    	
        red = green = blue = lightness;
        
    } else {
    	
        function hue2rgb(p, q, t) {
            
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            
            return p;
            
        }
		
        var q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
        var p = 2 * lightness - q;
        
        red = hue2rgb(p, q, hue + 1/3);
        green = hue2rgb(p, q, hue);
        blue = hue2rgb(p, q, hue - 1/3);
        
    }
	
	if (red > 255) {
    	
    	red = 255;
    	
    } else if (red < 0) {
    	
		red = 0;
    	
    }
	
	if (blue > 255) {
    	
    	blue = 255;
    	
    } else if (blue < 0) {
    	
    	blue = 0;
    	
    }
	
	if (green > 255) {
    	
    	green = 255;
    	
    } else if (green < 0) {
    	
    	green = 0;
    	
    }
	
	return (usePound ? "#" : "") + ("0" + parseInt((red * 255), 10).toString(16)).slice(-2) + ("0" + parseInt((green * 255), 10).toString(16)).slice(-2) + ("0" + parseInt((blue * 255), 10).toString(16)).slice(-2);
	
	
}`;